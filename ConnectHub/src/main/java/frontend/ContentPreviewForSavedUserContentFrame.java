/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import backend.ImageHandler;
import backend.NewsFeed;
import backend.Posts;
import backend.Stories;
import backend.User;
import backend.UserSession;
import java.awt.Font;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author pc castle
 */
public class ContentPreviewForSavedUserContentFrame extends javax.swing.JFrame {
    private User user;
    private int selectedindix;
    private int type;
    private UserContentPanel ucp;
    /**
     * Creates new form ContentPreviewForSavedUserContentFrame
     */
    public ContentPreviewForSavedUserContentFrame(int selectedindix, int type) {
        initComponents();
        this.selectedindix= selectedindix;
        this.type= type;
        User currentUser = UserSession.getCurrentUser();
if (currentUser == null) {
    throw new IllegalStateException("No user is currently logged in.");
}
        this.ucp= UserContentPanel.getInstance();
        this.user = currentUser;
        ContentLabel.setText(UserSession.getCurrentUser().getUsername() + "'s recent updates");
        ContentLabel.setFont(new Font("Arial", Font.BOLD, 30));

        if (type == 1) {
            Posts post = findPost(selectedindix);
            if (post != null) {
                ImageIcon image = findPost(selectedindix).getImage();
                if (image != null) {
                    userContentLabel.setIcon(ImageHandler.rescaleImageIcon(image, 339, 339));
                } else {
                    System.out.println("Image is null for the selected post.");
                }
                ContentLabel.setText(post.getContent());
            } else {
                ContentLabel.setText("Post not found.");
            }
        }
        if (type == 2) {
            Stories story = findStory(selectedindix);
            if (story != null) {
                ImageIcon image = findStory(selectedindix).getImage();
                if (image != null) {
                    userContentLabel.setIcon(ImageHandler.rescaleImageIcon(image, 339, 339));
                } else {
                    System.out.println("Image is null for the selected post.");
                }

                ContentLabel.setText(story.getContent());
            } else {
                ContentLabel.setText("Story not found.");
            }
        }

        ContentLabel.setHorizontalTextPosition(JLabel.RIGHT);
        ContentLabel.setVerticalTextPosition(JLabel.CENTER);
        ContentLabel.setFont(new Font("Arial", Font.BOLD, 24));
    }
    
    
    public Posts findPost(int selectedindix) {
        ArrayList<Posts> posts = NewsFeed.fetchPostsForUser(user);
        if (selectedindix >= 0 && selectedindix < posts.size()) {
            Posts post = posts.get(selectedindix);
            return post;
            
        } else {
            throw new IndexOutOfBoundsException("Selected index is out of bounds.");
        }

    }
    
    public Stories findStory(int selectedindix) {
       ArrayList<Stories> stories =  NewsFeed.fetchStoriesForUser(user);
       if (selectedindix >= 0 && selectedindix < stories.size()) {
            Stories story = stories.get(selectedindix);
            return story;
            //
        } else {
            throw new IndexOutOfBoundsException("Selected index is out of bounds.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ContentLabel = new javax.swing.JLabel();
        userContentLabel = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        removeButton.setText("REMOVE");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userContentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(120, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(ContentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(removeButton)
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ContentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(userContentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        try {
            int choice = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you would like to delete the story?",
                    "Remove Story",
                    JOptionPane.YES_NO_OPTION
            );

            if (choice == JOptionPane.YES_OPTION) {
                if (type == 1) {
                    this.findPost(selectedindix).delete(findPost(selectedindix).getContentID());
                    ucp.updatePostsList(user);
                } else if (type == 2) {
                    this.findStory(selectedindix).delete(findPost(selectedindix).getContentID());
                    ucp.updatePostsList(user);
                }
            } else if (choice == JOptionPane.NO_OPTION) {
                System.out.println("User chose No");
            }
        } catch (Exception ex) {
            System.out.println("No choice was made");
            return;
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ContentLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel userContentLabel;
    // End of variables declaration//GEN-END:variables
}
