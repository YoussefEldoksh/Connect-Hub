/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import backend.Group;
import backend.GroupSession;
import backend.ImageHandler;
import backend.NewsFeed;
import backend.Posts;
import backend.User;
import backend.UserSession;
import java.awt.Font;
import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author husse
 */
public class ContentPreviewForGroups extends javax.swing.JFrame {
    User user;
    Group group;
    int selectedindex;
    groupPostsPanel gpp;
    /**
     * Creates new form ContentPreviewForGroups
     */

    //if user is displaying an image of another group member
    public ContentPreviewForGroups(int selectedindex, String selectedUsername, int type, groupPostsPanel gpp) {
        initComponents();
        this.selectedindex= selectedindex;
        this.gpp = gpp;
        this.user = UserSession.getCurrentUser();
        this.group = GroupSession.getCurrentGroup();
        ContentLabel.setText(selectedUsername + "'s recent updates in the group ");
        ContentLabel.setFont(new Font("Arial", Font.BOLD, 30));

        ContentLabel.setIcon(ImageHandler.rescaleImageIcon(findPost(selectedindex).getImage(), 339, 339));
        ContentLabel.setText(findPost(selectedindex).getContent());

        ContentLabel.setHorizontalTextPosition(JLabel.RIGHT);
        ContentLabel.setVerticalTextPosition(JLabel.CENTER);
        ContentLabel.setFont(new Font("Arial", Font.BOLD, 24));
        
       //if user is not an admin nor the publisher of the post, he shouldnt access the editor or removal button
        boolean userIdAdmin = group.checkIfUserIsAdmin(user.getUserId());
        if(!user.getUsername().equals(selectedUsername) &&  !userIdAdmin)
        {
        removePostButton.setVisible(false);
        EditPostButton.setVisible(false);
        }
    }
    
    //if user is displaying his newly added post
        public ContentPreviewForGroups(Posts post, int type, groupPostsPanel gpp) {
        initComponents();
        this.user = UserSession.getCurrentUser();
        ContentLabel.setText("You, " + UserSession.getCurrentUser().getUsername() + " just published in the group");
        ContentLabel.setFont(new Font("Arial", Font.BOLD, 30));

        ContentLabel.setIcon(ImageHandler.rescaleImageIcon(post.getImage(), 339, 339));
        ContentLabel.setText(post.getContent());
    
        ContentLabel.setHorizontalTextPosition(JLabel.RIGHT);
        ContentLabel.setVerticalTextPosition(JLabel.CENTER);
        ContentLabel.setFont(new Font("Arial", Font.BOLD, 24));
    }
    
    

    public Posts findPost(int selectedindex) {
        Posts postChosen= group.getGroupPosts().get(selectedindex);
        return postChosen;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ContentLabel = new javax.swing.JLabel();
        removePostButton = new javax.swing.JButton();
        EditPostButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        removePostButton.setText("Remove Post");
        removePostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePostButtonActionPerformed(evt);
            }
        });

        EditPostButton.setText("Edit Post");
        EditPostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPostButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(ContentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removePostButton, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(EditPostButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(46, 46, 46))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(removePostButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditPostButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ContentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removePostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePostButtonActionPerformed
        try {
            int choice = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you would like to delete the Post?",
                    "Remove Post",
                    JOptionPane.YES_NO_OPTION
            );

            if (choice == JOptionPane.YES_OPTION) {
                gpp.deleteContent(true, findPost(selectedindex));
            } else if (choice == JOptionPane.NO_OPTION) {
                System.out.println("User chose No");
            }
        } catch (Exception ex) {
            System.out.println("No choice was made");
            return;
        }                                             
    }//GEN-LAST:event_removePostButtonActionPerformed

    private void EditPostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPostButtonActionPerformed
      try {
            String newContent = JOptionPane.showInputDialog(this, "Edit your post content:", "Edit Post", JOptionPane.PLAIN_MESSAGE);
            if (newContent != null && !newContent.trim().isEmpty()) {
                Posts post = findPost(0);
                if (post != null) {
                    post.setContent(newContent);
                    JOptionPane.showMessageDialog(this, "Post updated successfully.");
                    ContentLabel.setText(newContent);
                } else {
                    JOptionPane.showMessageDialog(this, "Error: Post not found.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No changes were made to the post.");
            }
        } catch (Exception ex) {
            System.out.println("Error while editing post: " + ex.getMessage());
        }
    }//GEN-LAST:event_EditPostButtonActionPerformed

    /**
     * @param args the command line arguments
     */
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ContentLabel;
    private javax.swing.JButton EditPostButton;
    private javax.swing.JButton removePostButton;
    // End of variables declaration//GEN-END:variables
}
