/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import backend.FriendManagement;
import backend.FriendRequests;
import backend.Notification;
import backend.User;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author malak
 */
public class NotificationsFrame extends javax.swing.JFrame {

    /**
     * Creates new form NotificationsFrame
     */
    private static NotificationsFrame instance = null;
    DefaultListModel<String> notificationsListModel = new DefaultListModel<>();
    boolean notificationListUpdate = false;

    private NotificationsFrame() {
        initComponents();
    }

    public static NotificationsFrame getInstance() {
        if (instance == null) {
            instance = new NotificationsFrame();
        }
        return instance;
    }

    public void updateNotificationsList() {

        notificationListUpdate = true;
        ArrayList<String> linerep = backend.UserSession.getCurrentUser().getLineRepresentationForNotifications();
        notificationsListModel.clear();

        for (int i = 0; i < linerep.size(); i++) {
            notificationsListModel.addElement(linerep.get(i));
        }
        notificationsList.setModel(notificationsListModel);
        notificationListUpdate = false;
        System.out.println("Notifications List Data: " + linerep);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notificationsList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Notifictions");
        jLabel1.setToolTipText("");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 6, 217, 47));

        notificationsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        notificationsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                notificationsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(notificationsList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 59, 365, 175));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/purple-gradient-background-5472-x-3648-i2xtxsy5ijm2ik4e.jpg"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        NewsFeedPage.getInstance(backend.UserSession.getCurrentUser()).setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void notificationsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_notificationsListValueChanged
        // TODO add your handling code here:
        if (!notificationListUpdate) {
            String selectedValue = notificationsList.getSelectedValue();
            if (selectedValue == null) {
                JOptionPane.showMessageDialog(this, "No selection was made;");
            }

            String[] token = selectedValue.split(" ");

            if (token[4].equals("friendrequest")) {
                if (!FriendManagement.isFriend(token[0])) {
                    String username = backend.UserSession.getCurrentUser().getUsername();
                    FriendRequests friendrequest = backend.UserSession.getCurrentUser().getFriendReq(token[0]);
                    if (friendrequest == null) {
                        JOptionPane.showMessageDialog(this, "Error finding friendrequest");
                        return;
                    }

                    String[] options = {"Accept", "Remove"};
                    int choice = JOptionPane.showOptionDialog(
                            null,
                            "Would you like to: ",
                            ("Request by" + friendrequest.getUsername()),
                            JOptionPane.DEFAULT_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null, options, options[0]
                    );

                    System.out.println("User selected: " + token[0]);
                    if (choice == 0) {
                        FriendManagement.friendRequest(true, backend.UserSession.getCurrentUser(), friendrequest, false);
                        JOptionPane.showMessageDialog(null, "Friend request accepted successfully");

                    } else if (choice == 1) {
                        FriendManagement.friendRequest(false, backend.UserSession.getCurrentUser(), friendrequest, true);
                        JOptionPane.showMessageDialog(null, "Friend request denied successfully");
                    }

                }
            }
        }

    }//GEN-LAST:event_notificationsListValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> notificationsList;
    // End of variables declaration//GEN-END:variables
}
